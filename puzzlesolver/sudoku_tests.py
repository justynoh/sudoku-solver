import math, string, time
from puzzlesolver.solve_sudoku import *

def testSudoku():
    # Following (9x9) test cases taken from https://kjell.haxx.se/sudoku/
    board=[[0,0,1,0,9,0,0],
           [2,0,0,4,0,8,0],
           [8,0,0,0,0,0,1],
           [0,2,0,5,0,1,8],
           [0,0,9,0,2,0,9],
           [6,0,7,9,8,3,0],
           [1,0,0,8,0,0,0]]
    try: print(solveSudoku(board))
    except: print("Caught error test.")
    start=time.time()
    board=[[0,0,1,0,9,0,0,0,8],
           [2,0,0,4,0,8,0,0,3],
           [8,0,0,0,0,0,1,5,0],
           [0,2,0,5,0,1,8,0,0],
           [0,0,9,0,2,0,0,3,0],
           [6,0,7,9,8,3,0,0,4],
           [1,0,0,8,0,0,0,0,0],
           [0,0,0,3,0,2,6,0,7],
           [0,0,6,0,4,7,0,0,9]]
    soln= [[7,3,1,2,9,5,4,6,8],
           [2,6,5,4,1,8,9,7,3],
           [8,9,4,7,3,6,1,5,2],
           [4,2,3,5,7,1,8,9,6],
           [5,8,9,6,2,4,7,3,1],
           [6,1,7,9,8,3,5,2,4],
           [1,7,2,8,6,9,3,4,5],
           [9,4,8,3,5,2,6,1,7],
           [3,5,6,1,4,7,2,8,9]]
    assert(solveSudoku(board)==soln)
    print('9x9 (easy): '+str(time.time()-start)+' s.')
    start=time.time()
    board=[[0,0,0,0,0,0,8,0,0],
           [1,0,0,0,0,0,6,0,4],
           [0,7,0,2,5,0,0,0,0],
           [0,4,0,3,0,0,0,2,6],
           [0,0,0,0,0,6,0,0,3],
           [6,0,0,0,0,4,0,0,0],
           [0,0,0,0,0,0,4,0,0],
           [0,3,2,7,0,0,0,0,0],
           [0,5,0,0,0,0,0,0,0]]
    soln= [[3,9,5,4,6,1,8,7,2],
           [1,2,8,9,3,7,6,5,4],
           [4,7,6,2,5,8,3,1,9],
           [5,4,7,3,8,9,1,2,6],
           [2,8,9,1,7,6,5,4,3],
           [6,1,3,5,2,4,7,9,8],
           [7,6,1,8,9,2,4,3,5],
           [8,3,2,7,4,5,9,6,1],
           [9,5,4,6,1,3,2,8,7]]
    assert(solveSudoku(board)==soln)
    print('9x9 (medm): '+str(time.time()-start)+' s.')
    # Following (16x16) test case taken from http://en.top-sudoku.com/
    start=time.time()
    board=[[0,0,0,0,0,0,0,4,0],
           [1,0,0,0,7,0,0,0,0],
           [0,5,0,0,0,0,0,9,0],
           [2,0,0,0,0,0,0,0,1],
           [0,0,0,9,0,5,0,0,0],
           [0,8,0,0,0,4,0,0,0],
           [0,4,0,0,0,0,0,0,0],
           [0,0,0,0,2,0,6,0,0],
           [0,9,6,0,0,0,0,0,7]]
    soln= [[6,2,8,5,9,1,7,4,3],
           [1,3,9,4,7,8,2,6,5],
           [4,5,7,6,3,2,1,9,8],
           [2,6,4,3,8,7,9,5,1],
           [7,1,3,9,6,5,4,8,2],
           [9,8,5,2,1,4,3,7,6],
           [3,4,2,7,5,6,8,1,9],
           [5,7,1,8,2,9,6,3,4],
           [8,9,6,1,4,3,5,2,7]]
    assert(solveSudoku(board)==soln)
    print('9x9 (hard): '+str(time.time()-start)+' s.')
    start=time.time()
    A,B,C,D,E,F=11,12,13,14,15,16
    board=[[7,0,0,8,0,C,0,0,0,0,0,0,0,0,F,0],
           [0,0,0,0,8,0,7,4,0,0,10,2,A,0,0,0],
           [B,2,0,5,0,0,0,0,7,0,0,0,0,10,0,8],
           [E,0,0,C,0,0,0,3,0,0,0,9,4,2,0,0],
           [0,0,0,B,0,0,0,A,0,E,0,3,F,0,0,0],
           [A,0,0,0,9,0,2,0,0,0,0,4,0,D,8,0],
           [0,4,0,0,0,F,0,0,0,0,0,0,0,0,2,0],
           [0,F,0,3,0,0,1,8,B,0,2,0,0,0,0,9],
           [8,0,A,E,0,0,0,0,4,F,0,0,B,0,0,0],
           [0,0,6,0,7,0,E,0,0,D,0,0,9,0,4,5],
           [0,0,B,0,0,0,0,5,0,0,9,0,7,0,3,0],
           [D,9,0,0,0,0,6,C,0,0,0,0,0,A,0,0],
           [0,0,E,D,4,9,0,10,0,2,6,5,3,0,1,B],
           [C,0,0,10,0,0,F,0,0,0,1,B,0,0,0,D],
           [3,0,0,0,E,0,0,6,0,A,7,0,2,F,0,0],
           [0,0,0,0,3,0,D,0,0,0,C,0,0,7,0,4]]
    soln= [[7,A,4,8,10,C,B,2,D,3,E,6,5,9,F,1],
           [6,D,F,9,8,1,7,4,5,B,10,2,A,3,C,E],
           [B,2,3,5,F,A,9,E,7,C,4,1,D,10,6,8],
           [E,1,10,C,D,6,5,3,F,8,A,9,4,2,B,7],
           [9,8,2,B,C,10,4,A,1,E,D,3,F,5,7,6],
           [A,E,C,6,9,7,2,B,10,5,F,4,1,D,8,3],
           [10,4,7,1,5,F,3,D,6,9,8,C,E,B,2,A],
           [5,F,D,3,6,E,1,8,B,7,2,A,C,4,10,9],
           [8,3,A,E,1,2,10,9,4,F,5,7,B,6,D,C],
           [1,C,6,2,7,3,E,F,A,D,B,10,9,8,4,5],
           [4,10,B,F,A,D,8,5,C,6,9,E,7,1,3,2],
           [D,9,5,7,B,4,6,C,2,1,3,8,10,A,E,F],
           [F,7,E,D,4,9,A,10,8,2,6,5,3,C,1,B],
           [C,6,9,10,2,5,F,7,3,4,1,B,8,E,A,D],
           [3,B,1,4,E,8,C,6,9,A,7,D,2,F,5,10],
           [2,5,8,A,3,B,D,1,E,10,C,F,6,7,9,4]]
    assert(solveSudoku(board)==soln)
    print('16x16: '+str(time.time()-start)+' s.')
    # Following (25x25) test case taken from http://sudoku-puzzles.merschat.com/
    start=time.time()
    board=[[0,0,0,25,0,0,0,0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0],
           [0,0,18,23,0,0,0,0,0,0,0,0,0,25,22,0,0,0,0,0,7,0,0,0,0],
           [0,0,5,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,14,0],
           [0,0,0,0,14,0,0,0,0,0,0,0,0,23,0,0,16,0,0,6,0,0,0,0,0],
           [0,0,13,0,0,0,0,0,0,0,11,0,5,0,0,0,0,18,0,12,0,0,0,0,0],
           [0,0,0,21,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0],
           [0,9,0,0,0,0,0,0,21,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0],
           [15,0,0,0,0,0,0,0,0,0,0,8,0,0,0,22,0,13,0,0,4,0,0,0,14],
           [0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0],
           [0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,1,0,0,24,0,23],
           [23,12,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [1,0,0,0,5,0,0,9,24,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,0,0,20,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,3],
           [0,0,0,0,13,0,14,0,0,20,0,15,11,7,0,0,0,0,0,0,0,0,0,16,0],
           [0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0],
           [0,23,12,0,0,0,0,6,0,0,3,0,22,19,0,0,0,0,0,0,0,15,0,0,0],
           [0,0,0,0,0,0,23,0,0,0,0,0,6,0,16,0,0,0,0,0,0,0,0,2,0],
           [0,0,0,0,0,0,0,15,0,0,0,0,12,9,0,0,0,0,0,16,0,0,0,0,0],
           [0,0,0,0,19,20,0,0,0,2,0,0,0,11,0,0,0,0,9,0,0,0,0,8,0],
           [0,0,0,0,0,0,0,0,22,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0],
           [0,0,23,0,9,0,0,0,0,0,0,3,0,0,0,20,0,0,0,0,0,1,0,0,0],
           [0,5,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,17,0,0,0],
           [0,0,0,0,0,0,0,1,0,11,24,0,0,12,0,16,21,0,0,0,13,0,0,0,0]]
    soln= [[19,13,3,25,22,2,20,17,14,4,7,5,1,15,11,24,18,23,12,9,16,21,10,6,8],
           [8,16,21,10,6,19,13,3,25,22,2,20,17,14,4,7,5,1,15,11,24,18,23,12,9],
           [9,24,18,23,12,8,16,21,10,6,19,13,3,25,22,2,20,17,14,4,7,5,1,15,11],
           [11,7,5,1,15,9,24,18,23,12,8,16,21,10,6,19,13,3,25,22,2,20,17,14,4],
           [4,2,20,17,14,11,7,5,1,15,9,24,18,23,12,8,16,21,10,6,19,13,3,25,22],
           [22,19,13,3,25,4,2,20,17,14,11,7,5,1,15,9,24,18,23,12,8,16,21,10,6],
           [6,8,16,21,10,22,19,13,3,25,4,2,20,17,14,11,7,5,1,15,9,24,18,23,12],
           [12,9,24,18,23,6,8,16,21,10,22,19,13,3,25,4,2,20,17,14,11,7,5,1,15],
           [15,11,7,5,1,12,9,24,18,23,6,8,16,21,10,22,19,13,3,25,4,2,20,17,14],
           [14,4,2,20,17,15,11,7,5,1,12,9,24,18,23,6,8,16,21,10,22,19,13,3,25],
           [25,22,19,13,3,14,4,2,20,17,15,11,7,5,1,12,9,24,18,23,6,8,16,21,10],
           [10,6,8,16,21,25,22,19,13,3,14,4,2,20,17,15,11,7,5,1,12,9,24,18,23],
           [23,12,9,24,18,10,6,8,16,21,25,22,19,13,3,14,4,2,20,17,15,11,7,5,1],
           [1,15,11,7,5,23,12,9,24,18,10,6,8,16,21,25,22,19,13,3,14,4,2,20,17],
           [17,14,4,2,20,1,15,11,7,5,23,12,9,24,18,10,6,8,16,21,25,22,19,13,3],
           [3,25,22,19,13,17,14,4,2,20,1,15,11,7,5,23,12,9,24,18,10,6,8,16,21],
           [21,10,6,8,16,3,25,22,19,13,17,14,4,2,20,1,15,11,7,5,23,12,9,24,18],
           [18,23,12,9,24,21,10,6,8,16,3,25,22,19,13,17,14,4,2,20,1,15,11,7,5],
           [5,1,15,11,7,18,23,12,9,24,21,10,6,8,16,3,25,22,19,13,17,14,4,2,20],
           [20,17,14,4,2,5,1,15,11,7,18,23,12,9,24,21,10,6,8,16,3,25,22,19,13],
           [13,3,25,22,19,20,17,14,4,2,5,1,15,11,7,18,23,12,9,24,21,10,6,8,16],
           [16,21,10,6,8,13,3,25,22,19,20,17,14,4,2,5,1,15,11,7,18,23,12,9,24],
           [24,18,23,12,9,16,21,10,6,8,13,3,25,22,19,20,17,14,4,2,5,1,15,11,7],
           [7,5,1,15,11,24,18,23,12,9,16,21,10,6,8,13,3,25,22,19,20,17,14,4,2],
           [2,20,17,14,4,7,5,1,15,11,24,18,23,12,9,16,21,10,6,8,13,3,25,22,19]]
    assert(solveSudoku(board)==soln)
    print('25x25: '+str(time.time()-start)+' s.')

def main():
    testSudoku()

if __name__ == '__main__':main()
